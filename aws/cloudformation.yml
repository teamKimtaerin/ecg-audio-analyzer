# ECG Audio Analysis - AWS Infrastructure as Code
# CloudFormation template for high-performance GPU instances

AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECG Audio Analysis Pipeline - GPU-accelerated infrastructure for dynamic subtitle generation'

Parameters:
  ProjectName:
    Type: String
    Default: 'ecg-audio-analyzer'
    Description: 'Name of the project for resource naming'
  
  EnvironmentName:
    Type: String
    Default: 'production'
    AllowedValues: [development, staging, production]
    Description: 'Environment name for resource tagging'
  
  InstanceType:
    Type: String
    Default: 'g4dn.2xlarge'
    AllowedValues:
      - g4dn.xlarge
      - g4dn.2xlarge
      - g4dn.4xlarge
      - p3.2xlarge
      - p3.8xlarge
    Description: 'EC2 instance type with GPU support'
  
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: 'EC2 Key Pair for SSH access'
  
  AllowedSSHCIDR:
    Type: String
    Default: '0.0.0.0/0'
    Description: 'CIDR block allowed for SSH access'
  
  VolumeSize:
    Type: Number
    Default: 500
    MinValue: 100
    MaxValue: 2000
    Description: 'EBS volume size in GB'
  
  MinInstances:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 10
    Description: 'Minimum number of instances in Auto Scaling Group'
  
  MaxInstances:
    Type: Number
    Default: 5
    MinValue: 1
    MaxValue: 20
    Description: 'Maximum number of instances in Auto Scaling Group'

Mappings:
  # Deep Learning AMI with CUDA support
  AMIRegionMap:
    us-east-1:
      AMI: ami-0c02fb55956c7d316  # Deep Learning AMI (Ubuntu 20.04) - Update as needed
    us-west-2:
      AMI: ami-0892d3c7ee96c0bf7  # Deep Learning AMI (Ubuntu 20.04) - Update as needed
    eu-west-1:
      AMI: ami-0d71ea30463e0ff8d  # Deep Learning AMI (Ubuntu 20.04) - Update as needed

Resources:
  # S3 Bucket for audio files and results
  AudioProcessingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-${EnvironmentName}-audio-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: TempFileCleanup
            Status: Enabled
            ExpirationInDays: 1
            Prefix: temp/
          - Id: ArchiveResults
            Status: Enabled
            Prefix: results/
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
      AccelerateConfiguration:
        AccelerationStatus: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: s3:ObjectCreated:*
            CloudWatchConfiguration:
              LogGroupName: !Ref AudioProcessingLogGroup

  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-vpc'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-igw'

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-public-subnet'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-public-routes'

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  # Security Group
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-${EnvironmentName}-ec2-sg'
      GroupDescription: 'Security group for ECG Audio Analysis EC2 instances'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedSSHCIDR
          Description: 'SSH access'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
          Description: 'HTTP access'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
          Description: 'HTTPS access'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: '0.0.0.0/0'
          Description: 'All outbound traffic'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-ec2-sg'

  # IAM Role for EC2 instances
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${EnvironmentName}-ec2-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub '${AudioProcessingBucket}/*'
                  - !GetAtt AudioProcessingBucket.Arn
        - PolicyName: CloudWatchMetrics
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${ProjectName}-${EnvironmentName}-ec2-profile'
      Roles:
        - !Ref EC2InstanceRole

  # Launch Template
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${ProjectName}-${EnvironmentName}-launch-template'
      LaunchTemplateData:
        ImageId: !FindInMap [AMIRegionMap, !Ref 'AWS::Region', AMI]
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: !Ref VolumeSize
              VolumeType: gp3
              Iops: 3000
              Throughput: 250
              DeleteOnTermination: true
              Encrypted: true
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            
            # Update system
            apt-get update
            apt-get install -y awscli docker.io nvidia-docker2 python3-pip git
            
            # Configure Docker for NVIDIA
            systemctl restart docker
            
            # Install CloudWatch agent
            wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
            dpkg -i amazon-cloudwatch-agent.deb
            
            # Create application directory
            mkdir -p /opt/ecg-audio-analyzer
            cd /opt/ecg-audio-analyzer
            
            # Clone repository (replace with your repository URL)
            # git clone https://github.com/your-org/ecg-audio-analyzer.git .
            
            # Set environment variables
            export ECG_S3_BUCKET=${AudioProcessingBucket}
            export AWS_DEFAULT_REGION=${AWS::Region}
            
            # Configure performance settings
            echo 'net.core.rmem_max = 134217728' >> /etc/sysctl.conf
            echo 'net.core.wmem_max = 134217728' >> /etc/sysctl.conf
            echo 'vm.swappiness = 10' >> /etc/sysctl.conf
            sysctl -p
            
            # Signal successful completion
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub '${ProjectName}-${EnvironmentName}-instance'
              - Key: Project
                Value: !Ref ProjectName
              - Key: Environment
                Value: !Ref EnvironmentName

  # Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: !Ref MinInstances
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true
    Properties:
      AutoScalingGroupName: !Sub '${ProjectName}-${EnvironmentName}-asg'
      VPCZoneIdentifier:
        - !Ref PublicSubnet
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinInstances
      MaxSize: !Ref MaxInstances
      DesiredCapacity: !Ref MinInstances
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-asg-instance'
          PropagateAtLaunch: true
        - Key: Project
          Value: !Ref ProjectName
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref EnvironmentName
          PropagateAtLaunch: true

  # CloudWatch Log Group
  AudioProcessingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/ec2/${ProjectName}-${EnvironmentName}'
      RetentionInDays: 30

  # CloudWatch Alarms
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${EnvironmentName}-high-cpu'
      AlarmDescription: 'High CPU utilization'
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      AlarmActions:
        - !Ref ScaleUpPolicy

  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: 1
      PolicyType: SimpleScaling

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: -1
      PolicyType: SimpleScaling

  LowCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${EnvironmentName}-low-cpu'
      AlarmDescription: 'Low CPU utilization'
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 20
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      AlarmActions:
        - !Ref ScaleDownPolicy

Outputs:
  S3BucketName:
    Description: 'Name of the S3 bucket for audio processing'
    Value: !Ref AudioProcessingBucket
    Export:
      Name: !Sub '${AWS::StackName}-S3Bucket'

  AutoScalingGroupName:
    Description: 'Name of the Auto Scaling Group'
    Value: !Ref AutoScalingGroup
    Export:
      Name: !Sub '${AWS::StackName}-ASG'

  VPCId:
    Description: 'VPC ID'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'

  PublicSubnetId:
    Description: 'Public Subnet ID'
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet'

  SecurityGroupId:
    Description: 'Security Group ID for EC2 instances'
    Value: !Ref EC2SecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroup'

  LogGroupName:
    Description: 'CloudWatch Log Group name'
    Value: !Ref AudioProcessingLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-LogGroup'