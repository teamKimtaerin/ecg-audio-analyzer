# ECG Audio Analyzer - Continuous Deployment
# Automated deployment to AWS EC2 g4dn.xlarge with GPU optimization
name: CD - Production Deployment

on:
  push:
    branches: [main]
    paths-ignore:
      - "**.md"
      - "docs/**"
      - "examples/**"
      - "assets/**"
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "Force deployment (skip some checks)"
        required: false
        default: false
        type: boolean
      target_instance:
        description: "Target EC2 instance type"
        required: false
        default: "g4dn.xlarge"
        type: choice
        options:
          - "g4dn.xlarge"
          - "g4dn.2xlarge"
          - "p3.2xlarge"

# Security: Ensure only one deployment at a time
concurrency:
  group: production-deployment
  cancel-in-progress: false

env:
  # Application configuration
  APP_NAME: ecg-audio-analyzer
  DOCKER_IMAGE: ecg-audio-analyzer:latest
  CONTAINER_NAME: ecg-audio-analyzer

  # AWS Configuration
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}

  # Deployment configuration
  DEPLOYMENT_TIMEOUT: 600 # 10 minutes
  HEALTH_CHECK_TIMEOUT: 180 # 3 minutes

jobs:
  # =============================================================================
  # Pre-deployment Validation
  # =============================================================================
  pre-deployment-checks:
    name: 🔍 Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.changes.outputs.should_deploy }}
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔍 Check for significant changes
        id: changes
        run: |
          # Check if we should skip deployment
          if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "🚀 Force deployment requested"
            exit 0
          fi

          # Check for code changes (not just docs/readme)
          if git diff --name-only HEAD~1 | grep -E '\.(py|yml|yaml|toml|txt|sh)$'; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "✅ Code changes detected, deployment needed"
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No significant code changes, skipping deployment"
          fi

      - name: 📝 Generate version tag
        id: version
        run: |
          # Generate version from timestamp and commit SHA
          VERSION="v$(date +'%Y%m%d')-$(git rev-parse --short HEAD)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "🏷️ Generated version: $VERSION"

  # =============================================================================
  # Prepare Code for Deployment
  # =============================================================================
  prepare-deployment:
    name: 🏗️ Prepare Code for Deployment
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks]
    if: needs.pre-deployment-checks.outputs.should_deploy == 'true'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Create deployment archive
        run: |
          # Create a clean deployment package
          tar -czf ecg-audio-analyzer-${{ needs.pre-deployment-checks.outputs.version }}.tar.gz \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='docker' \
            --exclude='venv' \
            --exclude='__pycache__' \
            --exclude='*.pyc' \
            --exclude='tests' \
            .

      - name: 📊 Show package info
        run: |
          ls -lh ecg-audio-analyzer-*.tar.gz
          echo "✅ Deployment package created successfully"

  # =============================================================================
  # Deploy to EC2 Instance
  # =============================================================================
  deploy-to-ec2:
    name: 🚀 Deploy to EC2
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, prepare-deployment]
    environment: production

    steps:
      - name: 📥 Checkout deployment scripts
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔧 Install Session Manager plugin
        run: |
          # Install AWS CLI Session Manager plugin
          curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o "session-manager-plugin.deb"
          sudo dpkg -i session-manager-plugin.deb

      - name: 📊 Check EC2 instance status
        run: |
          # Check if instance is running
          INSTANCE_STATE=$(aws ec2 describe-instances \
            --instance-ids ${{ env.EC2_INSTANCE_ID }} \
            --query 'Reservations[0].Instances[0].State.Name' \
            --output text)

          echo "🖥️ Instance state: $INSTANCE_STATE"

          if [[ "$INSTANCE_STATE" != "running" ]]; then
            echo "❌ Instance is not running. Current state: $INSTANCE_STATE"
            exit 1
          fi

      - name: 🧹 Cleanup and prepare EC2
        run: |
          # Create cleanup script
          cat > cleanup.sh << 'EOF'
          echo "🧹 Preparing EC2 for deployment..."
          
          # Stop existing ML API server if running
          sudo pkill -f "ml_api_server.py" || true
          sudo pkill -f "python.*ml_api_server" || true
          
          # Create application directory if not exists
          sudo mkdir -p /opt/ecg-audio-analyzer
          sudo chown ubuntu:ubuntu /opt/ecg-audio-analyzer
          
          # Clean up old deployment files
          rm -rf /opt/ecg-audio-analyzer/src /opt/ecg-audio-analyzer/*.py /opt/ecg-audio-analyzer/*.txt
          
          # Check disk space
          echo "💾 Disk usage:"
          df -h /
          EOF
          
          # Execute via Session Manager
          aws ssm send-command \
            --instance-ids ${{ env.EC2_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[\"$(cat cleanup.sh)\"]" \
            --output text

      - name: 📦 Deploy code to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            cd /opt/ecg-audio-analyzer
            
            echo "📦 Deploying application code..."
            
            # Remove old code
            rm -rf src/ *.py requirements.txt setup.py pyproject.toml
            
          EOF

          # Copy application files
          scp -o StrictHostKeyChecking=no -r \
            src/ \
            ml_api_server.py \
            run_ml_server.py \
            requirements.txt \
            setup.py \
            pyproject.toml \
            ubuntu@${{ secrets.EC2_HOST }}:/opt/ecg-audio-analyzer/

      - name: 🐍 Setup Python environment
        timeout-minutes: 15
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            cd /opt/ecg-audio-analyzer
            
            echo "🐍 Setting up Python environment..."
            
            # Create virtual environment if not exists
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi
            
            # Activate virtual environment
            source venv/bin/activate
            
            # Upgrade pip
            pip install --upgrade pip
            
            # Install dependencies in batches to avoid memory issues
            echo "📦 Installing basic dependencies..."
            pip install --no-cache-dir fastapi uvicorn aiohttp pydantic python-dotenv
            
            echo "📦 Installing audio processing dependencies..."  
            pip install --no-cache-dir librosa soundfile pydub ffmpeg-python
            
            echo "📦 Installing ML dependencies..."
            pip install --no-cache-dir torch torchaudio transformers scikit-learn
            
            echo "📦 Installing WhisperX..."
            pip install --no-cache-dir whisperx>=3.0.0
            
            echo "📦 Installing remaining dependencies..."
            pip install --no-cache-dir -r requirements.txt || true
            
            echo "✅ Python environment setup complete"
          EOF

      - name: 🚀 Start ML API Server
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            cd /opt/ecg-audio-analyzer
            
            echo "🚀 Starting ML API Server..."
            
            # Create environment file
            cat > .env << ENV_EOF
            ML_API_SERVER_URL=http://10.0.10.42:8080
            ENVIRONMENT=production
            LOG_LEVEL=INFO
            CUDA_VISIBLE_DEVICES=0
            ENV_EOF
            
            # Activate virtual environment and start server
            source venv/bin/activate
            
            # Start ML API server as daemon
            nohup python ml_api_server.py --host 0.0.0.0 --port 8080 --log-level info \
              > ml_server.log 2>&1 &
            
            echo "Server PID: $!" > ml_server.pid
            
            echo "✅ ML API Server started successfully"
          EOF

      - name: 🏥 Health check
        timeout-minutes: 3
        run: |
          echo "🏥 Performing health check..."

          # Wait for ML API server to be ready
          for i in {1..18}; do
            if ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} \
               "curl -f http://localhost:8080/health"; then
              echo "✅ Health check passed!"
              break
            fi
            
            if [ $i -eq 18 ]; then
              echo "❌ Health check failed after 3 minutes"
              # Get server logs for debugging
              ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} \
                "cat /opt/ecg-audio-analyzer/ml_server.log | tail -50"
              exit 1
            fi
            
            echo "⏳ Waiting for ML API server to be ready... (attempt $i/18)"
            sleep 10
          done

      - name: 📊 Post-deployment validation
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            echo "📊 Post-deployment system status:"
            
            # Container status
            echo "🐳 Container status:"
            docker ps --filter "name=${{ env.CONTAINER_NAME }}" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
            # GPU status
            echo "🎮 GPU status:"
            nvidia-smi --query-gpu=name,utilization.gpu,memory.used,memory.total --format=csv,noheader
            
            # System resources
            echo "💻 System resources:"
            echo "CPU: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)% usage"
            echo "Memory: $(free -h | awk 'NR==2{printf "%.1f%%", $3*100/$2 }')"
            echo "Disk: $(df -h / | awk 'NR==2{print $5}')"
            
            # Application logs (last 10 lines)
            echo "📋 Recent application logs:"
            docker logs --tail 10 ${{ env.CONTAINER_NAME }}
          EOF

  # =============================================================================
  # Deployment Notification and Rollback
  # =============================================================================
  post-deployment:
    name: 📢 Post-deployment Actions
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, prepare-deployment, deploy-to-ec2]
    if: always()

    steps:
      - name: 📊 Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ needs.pre-deployment-checks.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target**: AWS EC2 g4dn.xlarge" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.deploy-to-ec2.result }}" == "success" ]]; then
            echo "✅ **Status**: Deployment Successful" >> $GITHUB_STEP_SUMMARY
            echo "🔗 **Application**: https://${{ secrets.EC2_HOST }}:8080" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status**: Deployment Failed" >> $GITHUB_STEP_SUMMARY
            echo "🔄 **Action**: Check logs and consider rollback" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🚨 Rollback on failure
        if: needs.deploy-to-ec2.result == 'failure'
        run: |
          echo "🚨 Deployment failed, initiating rollback..."
          # In a real scenario, you would implement rollback logic here
          echo "⚠️ Manual intervention required for rollback"

      - name: ✅ Success notification
        if: needs.deploy-to-ec2.result == 'success'
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "🔗 Application is now running at: https://${{ secrets.EC2_HOST }}:8080"
          echo "📊 Monitor the application performance and logs"
