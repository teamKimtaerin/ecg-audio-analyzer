# ECG Audio Analyzer - Continuous Integration
# ML-optimized CI pipeline for PR validation and testing
name: CI - Pull Request Testing

on:
  pull_request:
    branches: [dev, main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'examples/**'
      - 'assets/**'
  workflow_dispatch:

# Cancel previous runs on new commits
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Python configuration
  PYTHON_VERSION: "3.11"
  POETRY_VENV_IN_PROJECT: true
  POETRY_CACHE_DIR: ~/.cache/pypoetry
  
  # Testing configuration
  PYTEST_ADDOPTS: "--tb=short --maxfail=5"
  PYTHONPATH: "./src"
  
  # Performance optimization
  PIP_NO_CACHE_DIR: 1
  PIP_USER: false

jobs:
  # =============================================================================
  # Code Quality and Linting
  # =============================================================================
  lint-and-format:
    name: üîç Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: üì¶ Install linting dependencies
        run: |
          python -m pip install --upgrade pip --no-cache-dir
          pip install black ruff mypy types-requests

      - name: üé® Check code formatting with Black
        run: |
          black --check --diff --color .
          
      - name: üîç Lint with Ruff
        run: |
          ruff check . --output-format=github

      - name: üè∑Ô∏è Type check with MyPy (non-blocking)
        continue-on-error: true
        run: |
          mypy src/ --ignore-missing-imports --no-strict-optional

  # =============================================================================
  # Dependency and Import Testing (Fast)
  # =============================================================================
  dependency-test:
    name: üì¶ Dependency & Import Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            pyproject.toml

      - name: üîß Install system dependencies (audio processing)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ffmpeg \
            libsndfile1-dev \
            libsox-dev \
            portaudio19-dev \
            libasound2-dev

      - name: üì¶ Install base dependencies only (no GPU)
        run: |
          python -m pip install --upgrade pip setuptools wheel --no-cache-dir
          pip install -e . --no-deps
          pip install -r requirements.txt

      - name: üß™ Test critical imports
        run: |
          python -c "
          import sys
          print(f'Python version: {sys.version}')
          
          # Test core imports
          try:
              import torch
              print(f'‚úÖ PyTorch: {torch.__version__}')
          except ImportError as e:
              print(f'‚ùå PyTorch import failed: {e}')
          
          try:
              import librosa
              print(f'‚úÖ Librosa: {librosa.__version__}')
          except ImportError as e:
              print(f'‚ùå Librosa import failed: {e}')
          
          try:
              import transformers
              print(f'‚úÖ Transformers: {transformers.__version__}')
          except ImportError as e:
              print(f'‚ùå Transformers import failed: {e}')
          
          # Test project imports
          try:
              from src.pipeline.manager import PipelineManager
              print('‚úÖ PipelineManager import successful')
          except ImportError as e:
              print(f'‚ùå PipelineManager import failed: {e}')
              
          try:
              from src.services.audio_extractor import AudioExtractor
              print('‚úÖ AudioExtractor import successful')
          except ImportError as e:
              print(f'‚ùå AudioExtractor import failed: {e}')
          
          print('‚úÖ All critical imports completed')
          "

  # =============================================================================
  # Unit Testing (Mock-based for ML components)
  # =============================================================================
  unit-tests:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format, dependency-test]
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: üîß Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg libsndfile1-dev libsox-dev

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip --no-cache-dir
          pip install -r requirements.txt
          pip install -e .

      - name: üß™ Run unit tests with coverage
        run: |
          python -m pytest tests/unit/ \
            --cov=src \
            --cov-report=xml \
            --cov-report=term-missing \
            --junit-xml=test-results.xml \
            -v

      - name: üìä Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: üìù Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ env.PYTHON_VERSION }}
          path: test-results.xml

  # =============================================================================
  # Docker Build Test (Critical for Deployment)
  # =============================================================================
  docker-build-test:
    name: üê≥ Docker Build Test
    runs-on: ubuntu-latest
    needs: [dependency-test]
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üèóÔ∏è Build Docker image (test only - CPU compatible)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.gpu
          push: false
          tags: ecg-audio-analyzer:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Build only base stage for CI testing (skip GPU dependencies)
          target: base
          build-args: |
            SKIP_GPU_DEPS=true

      - name: üß™ Test Docker container startup
        run: |
          docker run --rm ecg-audio-analyzer:test python --version
          docker run --rm ecg-audio-analyzer:test python -c "import torch; print('PyTorch version:', torch.__version__)"

  # =============================================================================
  # Performance & Security Checks
  # =============================================================================
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: üîç Run security scan with bandit
        run: |
          pip install bandit[toml]
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f txt

      - name: üì¶ Scan dependencies for vulnerabilities
        run: |
          pip install safety
          safety check --json --output safety-report.json || true
          safety check

      - name: üìä Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # =============================================================================
  # Integration Test Summary
  # =============================================================================
  integration-summary:
    name: ‚úÖ CI Summary
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests, docker-build-test, security-scan]
    if: always()
    
    steps:
      - name: üìä Check CI Results
        run: |
          echo "## üß™ CI Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.lint-and-format.result }}" == "success" ]]; then
            echo "‚úÖ **Code Quality**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Code Quality**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.unit-tests.result }}" == "success" ]]; then
            echo "‚úÖ **Unit Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Unit Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.docker-build-test.result }}" == "success" ]]; then
            echo "‚úÖ **Docker Build**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Docker Build**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "‚úÖ **Security Scan**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è **Security Scan**: Issues found (non-blocking)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Ready for merge!** üöÄ" >> $GITHUB_STEP_SUMMARY

      - name: ‚ùå Fail if critical tests failed
        if: |
          needs.lint-and-format.result == 'failure' ||
          needs.unit-tests.result == 'failure' ||
          needs.docker-build-test.result == 'failure'
        run: |
          echo "‚ùå Critical CI checks failed!"
          exit 1

      - name: ‚úÖ All tests passed
        if: success()
        run: |
          echo "üéâ All CI checks passed! Ready for deployment."