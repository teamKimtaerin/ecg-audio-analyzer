# ECG Audio Analyzer - Continuous Integration
# ML-optimized CI pipeline for PR validation and testing
name: CI - Pull Request Testing

on:
  pull_request:
    branches: [dev, main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'examples/**'
      - 'assets/**'
  workflow_dispatch:

# Cancel previous runs on new commits
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Python configuration
  PYTHON_VERSION: "3.11"
  PYTHONPATH: "./src"
  
  # Performance optimization
  PIP_USER: false

jobs:
  # =============================================================================
  # Code Quality and Linting
  # =============================================================================
  lint-and-format:
    name: 🔍 Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black ruff

      - name: 🎨 Check code formatting with Black
        run: |
          black --check --diff --color .
          
      - name: 🔍 Lint with Ruff
        run: |
          ruff check . --output-format=github

  # =============================================================================
  # Dependency and Import Testing (Fast)
  # =============================================================================
  dependency-test:
    name: 📦 Dependency & Import Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            pyproject.toml

      - name: 🔧 Install system dependencies (audio processing)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ffmpeg \
            libsndfile1-dev \
            libsox-dev \
            portaudio19-dev \
            libasound2-dev

      - name: 📦 Install base dependencies only (no GPU)
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e . --no-deps
          pip install -r requirements.txt

      - name: 🧪 Test critical imports
        run: |
          python -c "
          import sys
          print(f'Python version: {sys.version}')
          
          # Test core imports
          try:
              import torch
              print(f'✅ PyTorch: {torch.__version__}')
          except ImportError as e:
              print(f'❌ PyTorch import failed: {e}')
          
          try:
              import librosa
              print(f'✅ Librosa: {librosa.__version__}')
          except ImportError as e:
              print(f'❌ Librosa import failed: {e}')
          
          try:
              import transformers
              print(f'✅ Transformers: {transformers.__version__}')
          except ImportError as e:
              print(f'❌ Transformers import failed: {e}')
          
          # Test project imports
          try:
              from src.pipeline.manager import PipelineManager
              print('✅ PipelineManager import successful')
          except ImportError as e:
              print(f'❌ PipelineManager import failed: {e}')
              
          try:
              from src.services.audio_extractor import AudioExtractor
              print('✅ AudioExtractor import successful')
          except ImportError as e:
              print(f'❌ AudioExtractor import failed: {e}')
          
          print('✅ All critical imports completed')
          "

  # =============================================================================
  # Docker Build Test (Critical for Deployment)
  # =============================================================================
  docker-build-test:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    needs: [dependency-test]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🧹 Free up disk space for Docker build
        run: |
          echo "=== Before cleanup ==="
          df -h
          
          # Remove large packages and tools to free up space
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /usr/local/lib/android/sdk
          sudo rm -rf /usr/share/swift
          
          # Clean apt cache
          sudo apt-get clean
          sudo apt-get autoclean
          sudo apt-get autoremove --purge -y
          
          # Clean Docker system (but keep cache)
          docker system prune -f --volumes
          
          echo "=== After cleanup ==="
          df -h

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker image (test only - CPU compatible)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.gpu
          push: false
          load: true
          tags: ecg-audio-analyzer:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Build test stage for CI testing (minimal packages)
          target: test
          # Optimize build for smaller layers and better caching
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: 🧪 Test Docker container startup
        run: |
          docker run --rm ecg-audio-analyzer:test python --version
          docker run --rm ecg-audio-analyzer:test python -c "import torch; print('PyTorch version:', torch.__version__)"

  # =============================================================================
  # Performance & Security Checks
  # =============================================================================
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 🔍 Run security scan with bandit
        run: |
          pip install bandit[toml]
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f txt || echo "⚠️ Bandit found security issues (non-blocking)"

      - name: 📦 Scan dependencies for vulnerabilities
        run: |
          pip install safety
          safety check --json --output safety-report.json || true
          safety check || echo "⚠️ Safety found vulnerability issues (non-blocking)"

      - name: 📊 Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # =============================================================================
  # Integration Test Summary
  # =============================================================================
  integration-summary:
    name: ✅ CI Summary
    runs-on: ubuntu-latest
    needs: [lint-and-format, docker-build-test, security-scan]
    if: always()
    
    steps:
      - name: 📊 Check CI Results
        run: |
          echo "## 🧪 CI Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.lint-and-format.result }}" == "success" ]]; then
            echo "✅ **Code Quality**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Code Quality**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.docker-build-test.result }}" == "success" ]]; then
            echo "✅ **Docker Build**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Docker Build**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "✅ **Security Scan**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Security Scan**: Issues found (non-blocking)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Ready for merge!** 🚀" >> $GITHUB_STEP_SUMMARY

      - name: ❌ Fail if critical tests failed
        if: |
          needs.lint-and-format.result == 'failure' ||
          needs.docker-build-test.result == 'failure'
        run: |
          echo "❌ Critical CI checks failed!"
          exit 1

      - name: ✅ All tests passed
        if: success()
        run: |
          echo "🎉 All CI checks passed! Ready for deployment."