# Stage 1: Lint & Format Check (This will be the 'test' target)
# This stage remains unchanged, it's lightweight and works for CI.
FROM python:3.10-slim AS test

WORKDIR /app
COPY . .
RUN pip install ruff black
RUN ruff check .
RUN black --check .


# Stage 2: Production Build
# Use an official PyTorch image that already has torch, cuda, and cudnn.
# This avoids downloading the largest dependencies and saves significant disk space.
FROM pytorch/pytorch:2.5.1-cuda11.8-cudnn9-runtime

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# The pytorch image uses python3.10 by default.
# Install necessary runtime system dependencies.
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    ffmpeg \
    libgl1 && \
    rm -rf /var/lib/apt/lists/*

# Create a non-root user and set working directory
RUN useradd --create-home appuser
WORKDIR /home/appuser/app

# Upgrade pip and install remaining (smaller) dependencies
COPY requirements-docker.txt .
RUN python3.10 -m pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements-docker.txt

# Copy application code
COPY . .

# Change ownership and switch user
RUN chown -R appuser:appuser /home/appuser/app
USER appuser

# Expose the port the app runs on
EXPOSE 8080

# Command to run the application
CMD ["python3.10", "ml_api_server.py", "--host", "0.0.0.0", "--port", "8080"]
