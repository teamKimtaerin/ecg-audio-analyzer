# Stage 1: Base image with build tools and CUDA SDK
FROM nvidia/cuda:11.8.0-cudnn8-devel-ubuntu22.04 AS base

ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    python3.10 python3-pip git ffmpeg libgl1 && \
    rm -rf /var/lib/apt/lists/*
RUN python3.10 -m pip install --no-cache-dir --upgrade pip

# Stage 2: Lint & Format Check (This will be the 'test' target)
FROM python:3.10-slim AS test

WORKDIR /app
COPY . .
RUN pip install ruff black
RUN ruff check .
RUN black --check .

# Stage 3: Builder - Installs all application dependencies
FROM base AS builder

WORKDIR /app
COPY requirements.txt .
RUN python3.10 -m pip install --no-cache-dir -r requirements.txt --extra-index-url https://download.pytorch.org/whl/cu118

# Stage 4: Production - A smaller final image using the runtime base
FROM nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu22.04 AS production

ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Install only necessary runtime system dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    python3.10 \
    ffmpeg \
    libgl1 && \
    rm -rf /var/lib/apt/lists/*

# Create a non-root user and set working directory
RUN useradd --create-home appuser
WORKDIR /home/appuser/app

# Copy installed Python packages and binaries from the builder stage
COPY --from=builder /usr/local/lib/python3.10/dist-packages /usr/local/lib/python3.10/dist-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code
COPY . .

# Change ownership and switch user
RUN chown -R appuser:appuser /home/appuser/app
USER appuser

EXPOSE 8080
CMD ["python3.10", "ml_api_server.py", "--host", "0.0.0.0", "--port", "8080"]