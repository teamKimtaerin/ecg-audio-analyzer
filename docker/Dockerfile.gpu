# Stage 1: Builder - Installs all dependencies using the large devel image
FROM nvidia/cuda:11.8.0-cudnn8-devel-ubuntu22.04 AS builder

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PATH="/usr/local/bin:${PATH}"

# Install system dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    python3.10 \
    python3.10-venv \
    python3-pip \
    ffmpeg \
    git \
    libgl1 && \
    rm -rf /var/lib/apt/lists/*

# Update pip
RUN python3.10 -m pip install --no-cache-dir --upgrade pip

# Install Python dependencies
WORKDIR /app
COPY requirements.txt .
RUN python3.10 -m pip install --no-cache-dir -r requirements.txt --extra-index-url https://download.pytorch.org/whl/cu118


# Stage 2: Test - Uses the builder stage to run checks
FROM builder AS test

WORKDIR /app

# Install linting tools
RUN python3.10 -m pip install --no-cache-dir ruff black

# Copy app code
COPY . .

# Run checks
RUN ruff check .
RUN black --check .


# Stage 3: Production - A smaller final image using the runtime base
FROM nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu22.04 AS production

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Install only necessary runtime system dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    python3.10 \
    ffmpeg \
    libgl1 && \
    rm -rf /var/lib/apt/lists/*

# Create a non-root user and set working directory
RUN useradd --create-home appuser
WORKDIR /home/appuser/app

# Copy installed Python packages and binaries from the builder stage
COPY --from=builder /usr/local/lib/python3.10/dist-packages /usr/local/lib/python3.10/dist-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code
COPY . .

# Change ownership to the app user
RUN chown -R appuser:appuser /home/appuser/app

# Switch to the non-root user
USER appuser

# Expose the port the app runs on
EXPOSE 8080

# Command to run the application
CMD ["python3.10", "ml_api_server.py", "--host", "0.0.0.0", "--port", "8080"]
